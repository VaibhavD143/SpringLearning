CommandLine Runner and Application Runner:
    - these two are interfaces. These interfaces are implemented and their run method will be called right after spring application context is loaded and just before run() of application
    - There cam ne multiple methods to be called and we can also assign an order in which it should be executed

- @RequestBody is used to indicate that receiving data is of JSON format
- @Valid is to check constrain mentioned in entity class
- Spring Repository assigns proxy, it will
    - https://www.baeldung.com/the-persistence-layer-with-spring-data-jpa : understand repository interface

- @RequestBody can receive only one object in a request
    - Common practice is to create a class with those attributesxz
    - To get whole JsonTree as an object use jackson's ObjectNode object
    https://stackoverflow.com/questions/12893566/passing-multiple-variables-in-requestbody-to-a-spring-mvc-controller-using-ajax

Serialization and deserialization :
- @JsonRootName("KeyName") : name to assign root key while serializing when mapper.enable(SerializationFeature.WRAP_ROOT_VALUE),
    otherwise it will take classname as a key but for lazyFetch className is a bit modified.
- mapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY) : to avoid all the empty fields while serialization
NON_NULL : to avoid null values
- @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd-MM-yyyy hh:mm:ss") : to use this format while serialization
    otherwise jackson converts it to timestamp
- returning json string or JsonNode object, both is same
- we need to disable this property (SerializationFeature.FAIL_ON_EMPTY_BEANS,false) explicitly for mapper even though
  it is mentioned in application.property
        why?:
        -

- to avoid tailing objects to get serialized, we set them to null and then send.
        - there is MixIn something to avoid particular class fields while serialization : https://www.baeldung.com/jackson-ignore-properties-on-serializationhttps://www.baeldung.com/jackson-ignore-properties-on-serialization

- Serialization Deserialization :
http://tutorials.jenkov.com/java-json/jackson-objectmapper.html#jackson-databind
        - general Object mapper :   https://www.baeldung.com/jackson-object-mapper-tutorial
                                    https://github.com/FasterXML/jackson-databind/
        - for map to and fro : https://www.baeldung.com/jackson-map